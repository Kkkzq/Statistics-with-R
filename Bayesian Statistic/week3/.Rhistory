library(PairedData)
library(tidyverse)
library(statsr)
library(PairedData)
library(tidyverse)
library(statsr)
data(nc)
glimpse(nc)
summary(nc)
ggplot(data = nc, aes(x = gained)) +
geom_histogram(binwidth = 5)
# Type your code for Question 2 here.
summary(nc$weight)
ggplot(nc, aes(x = weight)) +
geom_histogram() +
ggtitle("Weight of the baby at birth in pounds") +
xlab("weight") +
ylab("count of babies")
nc_fullterm = filter(nc, premie == 'full term')
summary(nc_fullterm)
bayes_inference(y = weight, data = nc_fullterm,
statistic = "mean", type = "ci",
prior_family = "JZS", mu_0 = 7.7, rscale = 1,
method = "simulation",
cred_level = 0.95)
# Type your code for Question 1 here.
sapply(nc, is.factor)
# Type your code for the Exercise here.
bayes_inference(y= weight, data = nc_fullterm, statistic = 'mean', type = 'ht', null = 7.7, alternative = 'twosided', prior = "JZS", rscale = 1, method = 'theoretical', show_plot=FALSE)
weight_post = bayes_inference(y = weight, data = nc_fullterm,
statistic = "mean", type = "ci",
prior_family = "JZS", mu_0 = 7.7, rscale = 1,
method = "simulation",
cred_level = 0.95)
names(weight_post)
samples = as.data.frame(weight_post$samples)
nsim = nrow(samples)
samples = mutate(samples, y_pred = rnorm(nsim, mu, sqrt(sig2)))
ggplot(data = samples, aes(x = y_pred)) +
geom_histogram(aes(y = ..density..), bins = 100) +
geom_density() +
xlab(expression(y[new]))
dplyr::select(samples, mu, y_pred) %>%
map(quantile, probs=c(0.025, 0.50, 0.975))
# Type your code for Exersice 2 here.
nc_premie = filter(nc, premie == 'premie')
summary(nc_premie)
# Type your code for Exersice 2 here.
nc_premie = filter(nc, premie == 'premie')
summary(nc_premie)
ggplot(nc_premie, aes(x = weight)) +
geom_histogram(bins = 30)
# Type your code for Exersice 2 here.
nc_premie = filter(nc, premie == 'premie')
summary(nc_premie)
ggplot(nc_premie, aes(x = weight)) +
geom_histogram(bins = 30)
bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ci',
prior_family = 'JZS', mu_0 = 7.7,
rscale = 1, method = 'simulation',
cred_level = 0.95)
# Type your code for Exersice 2 here.
nc_premie = filter(nc, premie == 'premie')
summary(nc_premie)
ggplot(nc_premie, aes(x = weight)) +
geom_histogram(bins = 30)
# Credible interval
bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ci',
prior_family = 'JZS', mu_0 = 7.7,
rscale = 1, method = 'simulation',
cred_level = 0.95)
# Hypothesis test
bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ht',
null = 7.7, alternative = 'twosided',
prior = "JZS", rscale = 1,
method = 'theoretical', show_plot = FALSE)
# Prediction using MCMC
weight_premie_post = bayes_inference(y = weight,
data = nc_premie,
statistic = 'mean',
type = 'ci',
prior_family = 'JZS',
mu_0 = 7.7, rscale = 1,
method = 'simulation',
cred_level = 0.95)
# Type your code for Exersice 2 here.
nc_premie = filter(nc, premie == 'premie')
summary(nc_premie)
ggplot(nc_premie, aes(x = weight)) +
geom_histogram(bins = 30)
# Credible interval
bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ci',
prior_family = 'JZS', mu_0 = 7.7,
rscale = 1, method = 'simulation',
cred_level = 0.95)
# Hypothesis test
bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ht',
null = 7.7, alternative = 'twosided',
prior = "JZS", rscale = 1,
method = 'theoretical', show_plot = FALSE)
# Prediction using MCMC
weight_premie_post = bayes_inference(y = weight,
data = nc_premie,
statistic = 'mean',
type = 'ci',
prior_family = 'JZS',
mu_0 = 7.7, rscale = 1,
method = 'simulation',
cred_level = 0.95)
names(weight_premie_post)
samples0 = as.data.frame(weight_premie_post$samples)
nsim0 = nrow(samples)
samples0 = mutate(samples0, y_pred0 = rnorm(nsim, mu, sqrt(sig2)))
ggplot(data = samples0, aes(x = y_pred0)) +
geom_histogram(aes(y = ..density..), bins = 100) +
geom_density() +
xlab(expression(y[new]))
# Type your code for Exersice 2 here.
nc_premie = filter(nc, premie == 'premie')
summary(nc_premie)
p1 <- ggplot(nc_premie, aes(x = weight)) +
geom_histogram(bins = 30)
# Credible interval
p2 <- bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ci',
prior_family = 'JZS', mu_0 = 7.7,
rscale = 1, method = 'simulation',
cred_level = 0.95)
# Hypothesis test
p3 <- bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ht',
null = 7.7, alternative = 'twosided',
prior = "JZS", rscale = 1,
method = 'theoretical', show_plot = FALSE)
# Prediction using MCMC
weight_premie_post = bayes_inference(y = weight,
data = nc_premie,
statistic = 'mean',
type = 'ci',
prior_family = 'JZS',
mu_0 = 7.7, rscale = 1,
method = 'simulation',
cred_level = 0.95)
names(weight_premie_post)
samples0 = as.data.frame(weight_premie_post$samples)
nsim0 = nrow(samples)
samples0 = mutate(samples0, y_pred0 = rnorm(nsim, mu, sqrt(sig2)))
p4 <- ggplot(data = samples0, aes(x = y_pred0)) +
geom_histogram(aes(y = ..density..), bins = 100) +
geom_density() +
xlab(expression(y[new]))
# Type your code for Exersice 2 here.
nc_premie = filter(nc, premie == 'premie')
summary(nc_premie)
ggplot(nc_premie, aes(x = weight)) +
geom_histogram(bins = 30)
# Credible interval
bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ci',
prior_family = 'JZS', mu_0 = 7.7,
rscale = 1, method = 'simulation',
cred_level = 0.95)
# Hypothesis test
bayes_inference(y = weight, data = nc_premie,
statistic = 'mean', type = 'ht',
null = 7.7, alternative = 'twosided',
prior = "JZS", rscale = 1,
method = 'theoretical', show_plot = FALSE)
# Prediction using MCMC
weight_premie_post = bayes_inference(y = weight,
data = nc_premie,
statistic = 'mean',
type = 'ci',
prior_family = 'JZS',
mu_0 = 7.7, rscale = 1,
method = 'simulation',
cred_level = 0.95)
names(weight_premie_post)
samples0 = as.data.frame(weight_premie_post$samples)
nsim0 = nrow(samples)
samples0 = mutate(samples0, y_pred0 = rnorm(nsim, mu, sqrt(sig2)))
ggplot(data = samples0, aes(x = y_pred0)) +
geom_histogram(aes(y = ..density..), bins = 100) +
geom_density() +
xlab(expression(y[new]))
ggplot(nc, aes(x = habit, y = weight)) +
geom_boxplot()
# Type your code for the question here.
ggplot(nc_fullterm, aes(x = habit, y =weight)) +
geom_boxplot()
nc_fullterm %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
bayes_inference(y = weight, x = habit, data = nc_fullterm,
statistic = "mean",
type = "ht", alternative = "twosided", null = 0,
prior = "JZS", rscale = 1,
method = "theoretical", show_plot = FALSE)
# Type your code for the question here.
bayes_inference(y = weight, x = habit, data = nc_fullterm,
statistic = "mean",
type = "ht", alternative = "twosided", null = 0,
prior = "JZS", rscale = 1,
method = "theoretical", show_plot = FALSE,
hypothesis_prior = c(0.25, 0.75))
# Type your code for  Question 9 here.
bayes_inference(y = weight, x = habit, data = nc_fullterm,
statistic = "mean",
type = "ht", alternative = "twosided", null = 0,
prior = "JZS", rscale = sqrt(2)/2,
method = "theoretical", show_plot = FALSE)
# Type your code for Question 10 here.
bayes_inference(y = weight, x = habit, data = nc_fullterm,
statistic = "mean",
type = "ci", mu_0 = 0,
prior = "JZS", rscale = 1,
method = "simulation", show_plot = FALSE)
data("PrisonStress")
pss_control = PrisonStress %>%
filter(Group == "Control") %>%
mutate(diff = PSSbefore - PSSafter)
bayes_inference(y = diff, data = pss_control,
statistic = "mean",
type = "ht", alternative = "twosided", null = 0,
prior = "JZS", rscale = 1,
method = "simulation", show_plot = FALSE)
# Type your code for Question 11 here.
pss_sport = PrisonStress %>%
filter(Group == "Sport") %>%
mutate(diff = PSSbefore - PSSafter)
bayes_inference(y = diff, data = pss_sport, statistic = 'mean',
prior_family = 'JZS', rscale = 1, type = 'ht',
null = 0, alternative = 'twosided',
method = 'simulation', show_plot = FALSE)
# Type your code for Exercise 2 here.
pss_all = PrisonStress %>%
filter(Group == "Sport" | Group == 'Control') %>%
mutate(diff = PSSbefore - PSSafter)
bayes_inference(y = diff, data = pss_all, statistic = 'mean',
prior_family = 'JZS', rscale = 1, type = 'ht',
null = 0, alternative = 'twosided',
method = 'simulation', show_plot = FALSE)
