options(digits = 4)
library(MASS)
library(tidyverse)
library(statsr)
library(BAS)
library(broom)
options(width=100)
library(MASS)
library(tidyverse)
library(statsr)
library(BAS)
library(broom)
options(width=100)
data(wage)
set.seed(18382)
ggplot(data = wage, aes(x = wage)) +
geom_histogram(binwidth = 100)
summary(wage$wage)
ggplot(data = wage, aes(x = iq, y = wage)) +
geom_point()
m_wage_iq <- lm(wage ~ iq, data = wage)
tidy(m_wage_iq)
ggplot(data = wage, aes(x = iq, y = wage)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
confint(m_wage_iq)
# Type your code for Question 3 here.
m_wage_educ <- lm(wage ~ educ, data = wage)
c(m_wage_educ$coef, Sigma = summary(m_wage_educ)$sigma)
summary(m_wage_educ)
m_wage_iq_aug <- augment(m_wage_iq)
ggplot(data = m_wage_iq_aug, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(x = "Fitted values", y = "Residuals")
ggplot(data = m_wage_iq_aug, aes(x = .resid)) +
geom_histogram(binwidth = 100) +
xlab("Residuals")
ggplot(m_wage_iq_aug) +
geom_qq(aes(sample = .std.resid)) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
labs(x = "Theoretical quantiles", y = "Standardized residuals")
m_lwage_iq = lm(lwage ~ iq, data = wage)
outliers <- Bayes.outlier(m_lwage_iq, k = 3)
outliers_df <- data.frame(probability = outliers$prob.outlier,
case = 1:length(outliers$prob.outlier))
ggplot(outliers_df, aes(ymax = probability, x = case)) +
geom_linerange(ymin = 0) +
labs(y = "Probability")
outliers_df %>%
filter(probability > 0.50)
# prob of a case being an outlier:
#   being below or above 3 standard deviations from 0
(prob_outlier <- pnorm(-3) + pnorm(3, lower.tail = FALSE))
# probability of a signle case not being an outler is therefore the complement
(prob_not_outlier <- 1 - prob_outlier)
# probability of no outliers in the sample of n assuming errors are independent a priori
n <- nrow(wage)
(prob_no_outliers <- prob_not_outlier^n)
# probability of at least one outlier in the sample is the complement of the
# probability of no outliers in the sample of n
1 - prob_no_outliers
n <- nrow(wage)
(prob_obs_not_outlier <- 0.95^(1/n))
(newk <- qnorm(0.5 + 0.5 * prob_obs_not_outlier))
outliers <- Bayes.outlier(m_lwage_iq, prior.prob=0.95)
m_lwage_full <- lm(lwage ~ . - wage, data = wage)
BIC(m_lwage_full)
m_lwage_nobrthord <- lm(lwage ~ . - wage - brthord, data = na.omit(wage))
BIC(m_lwage_nobrthord)
# Exclude observations with missing values in the data set
wage_no_na <- na.omit(wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_lwage <- bas.lm(lwage ~ . -wage, data = wage_no_na,
prior = "BIC",
modelprior = uniform())
# Print out the marginal posterior inclusion probabilities for each variable
bma_lwage
# Top 5 most probably models
summary(bma_lwage)
# Obtain the coefficients from the model `bma_lwage`
coef_lwage <- coefficients(bma_lwage)
# `iq` is the 3rd variable, while `sibs` is the 13th variable in the data set
plot(coef_lwage, subset = c(3,13), ask = FALSE)
confint(coef_lwage)
wage_red <- wage %>%
select(-wage, -sibs, -brthord, -meduc, -feduc)
bma_lwage_red <- bas.lm(lwage ~ ., data = wage_red,
prior = "ZS-null",
modelprior = uniform())
coef(bma_lwage_red)
coef(bma_lwage_red) %>%
confint()
ci_urban <- coef(bma_lwage_red) %>%
confint(parm = "urban1") %>%
exp()
ci_urban
(ci_urban - 1) * 100
BPM_pred_lwage <- predict(bma_lwage, estimator = "BPM", se.fit = TRUE)
variable.names(BPM_pred_lwage)
HPM_pred_lwage <- predict(bma_lwage, estimator = "HPM")
variable.names(HPM_pred_lwage)
HPM_pred_lwage <- predict(bma_lwage, estimator = "HPM")
variable.names(HPM_pred_lwage)
HPM_pred_lwage <- predict(bma_lwage, estimator = "HPM")
variable.names(HPM_pred_lwage)
MPM_pred_lwage <- predict(bma_lwage, estimator = "MPM")
variable.names(MPM_pred_lwage)
# Find the index of observation with the largest fitted value
opt <- which.max(BPM_pred_lwage$fit)
# Extract the row with this observation and glimpse at the row
wage_no_na %>%
slice(opt) %>%
glimpse()
ci_lwage <- confint(BPM_pred_lwage, parm = "pred")
ci_lwage[opt,]
exp(ci_lwage[opt,])
BMA_pred_lwage <- predict(bma_lwage, estimator = "BMA", se.fit = TRUE)
ci_bma_lwage <- confint(BMA_pred_lwage, estimator = "BMA")
opt_bma <- which.max(BMA_pred_lwage$fit)
exp(ci_bma_lwage[opt_bma, ])
# Type your code for Question 8 here.
m_lwage_nobrthord <- lm(lwage ~ . - wage - sibs, data = na.omit(wage))
BIC(m_lwage_nobrthord)
# Type your code for Question 8 here.
m_lwage_nobrthord <- lm(lwage ~ . - wage - sibs, data = na.omit(wage))
BIC(m_lwage_nobrthord)
m_lwage_nobrthord <- lm(lwage ~ . - wage - feduc, data = na.omit(wage))
BIC(m_lwage_nobrthord)
# Type your code for Question 8 here.
m_lwage_nobrthord <- lm(lwage ~ . - wage - sibs, data = na.omit(wage))
BIC(m_lwage_nobrthord)
m_lwage_nobrthord <- lm(lwage ~ . - wage - feduc, data = na.omit(wage))
BIC(m_lwage_nobrthord)
m_lwage_nobrthord <- lm(lwage ~ . - wage - meduc, data = na.omit(wage))
BIC(m_lwage_nobrthord)
wage_red <- wage %>%
select(-wage, -sibs, -brthord, -meduc, -feduc)
bma_lwage_red <- bas.lm(lwage ~ ., data = wage_red,
prior = "ZS-null",
modelprior = uniform())
# Type your code for Question 3 here.
m_wage_educ <- lm(wage ~ educ, data = wage)
c(m_wage_educ$coef, Sigma = summary(m_wage_educ)$sigma)
summary(m_wage_educ)
confint(m_wage_edu)
# Type your code for Question 3 here.
m_wage_educ <- lm(wage ~ educ, data = wage)
c(m_wage_educ$coef, Sigma = summary(m_wage_educ)$sigma)
summary(m_wage_educ)
confint(m_wage_educ)
# Type your code for Question 4 here.
ggplot(m_wage_iq, aes(x = .resid)) +
geom_histogram(bins = 50)
# Type your code for Exercise 1 here.
ggplot(m_wage_edu, aes(x = .resid)) +
geom_histogram(bins = 50)
# Type your code for Exercise 1 here.
ggplot(m_wage_educ, aes(x = .resid)) +
geom_histogram(bins = 50)
# Type your code for Exercise 2 here.
m_lwage_iq_aug <- augment(m_lwage_iq)
ggplot(m_lwage_iq_aug, aes(x= .fitted, y = .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0) +
labs(x = "Fitted Values", y = 'Residuals')
# Type your code for Exercise 2 here.
m_lwage_iq_aug <- augment(m_lwage_iq)
ggplot(m_lwage_iq_aug, aes(x= .fitted, y = .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0) +
labs(x = "Fitted Values", y = 'Residuals')
ggplot(m_lwage_iq_aug, aes(x = .resid)) +
geom_histogram(alpha = 0.6, bins = 30) +
xlab("Residuals")
ggplot(m_lwage_iq_aug) +
geom_qq(aes(sample = .std.resid)) +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
labs(x = "Theoretical quantiles", y = "Standardized residuals")
# Type your code for  Exercise 3 here.
m_lwage_exper <- lm(lwage ~ exper, data = wage)
confint(m_lwage_exper)
m_lwage_exper_aug <- augment(m_lwage_exper)
ggplot(m_lwage_exper_aug, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0, linetype = 'dashed') +
labs(x = 'Fitted Values', y = 'Residuals')
# Type your code for  Exercise 3 here.
m_lwage_exper <- lm(lwage ~ exper, data = wage)
confint(m_lwage_exper)
m_lwage_exper_aug <- augment(m_lwage_exper)
ggplot(m_lwage_exper_aug, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0, linetype = 'dashed') +
labs(x = 'Fitted Values', y = 'Residuals')
ggplot(m_lwage_exper_aug, aes(x = .resid)) +
geom_histogram(bins = 30) +
xlab('Residuals')
# Type your code for  Exercise 3 here.
m_lwage_exper <- lm(lwage ~ exper, data = wage)
confint(m_lwage_exper)
m_lwage_exper_aug <- augment(m_lwage_exper)
ggplot(m_lwage_exper_aug, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0, linetype = 'dashed') +
labs(x = 'Fitted Values', y = 'Residuals')
ggplot(m_lwage_exper_aug, aes(x = .resid)) +
geom_histogram(bins = 30) +
xlab('Residuals')
ggplot(m_lwage_exper_aug, aes(sample = .resid)) +
stat_qq()
outliers <- Bayes.outlier(m_lwage_iq, k = 3)
names(outliers)
outliers_df <- data.frame(probability = outliers$prob.outlier,
case = 1:length(outliers$prob.outlier))
ggplot(outliers_df, aes(ymax = probability, x = case)) +
geom_linerange(ymin = 0) +
labs(y = "Probability")
outliers_df %>%
filter(probability > 0.50)
# Type your code for Question 5 here.
(prob_outlier <- pnorm(-3) + pnorm(3, lower.tail = FALSE))
outliers <- Bayes.outlier(m_lwage_iq, prior.prob=0.95)
# Type your code for Qustion 6 here.
outliers_df <- data.frame(outliers, probability = outliers$prob.outlier, case = 1:length(outliers$prob.outlier))
ggplot(outliers_df, aes(ymax = probability, x = case)) +
geom_linerange(ymin = 0)
# Type your code for Question 7 here.
tidy(m_lwage_full)
# Type your code for Exercise 4 here.
?stepAIC
# Exclude observations with missing values in the data set
wage_no_na <- na.omit(wage)
# Fit the model using Bayesian linear regression, `bas.lm` function in the `BAS` package
bma_lwage <- bas.lm(lwage ~ . -wage, data = wage_no_na,
prior = "BIC",
modelprior = uniform())
# Print out the marginal posterior inclusion probabilities for each variable
bma_lwage
# Top 5 most probably models
summary(bma_lwage)
# Type your code for Question 9 here.
summary(bma_lwage_red)
# Type your code for Question 10 here.
coef_lwage_red <- coefficients(bma_lwage_red)
plot(coef_lwage_red, subset = 8, ask = FALSE)
# Type your code for Exercise 5 here.
coef_lwage_red <- coefficients(bma_lwage_red)
plot(coef_lwage_red, subset = 8, ask = FALSE)
# Type your code for Question 10 here.
# Type your code for Exercise 6 here
ci_educ <- coef(bma_lwage_red) %>%
confint(parm = "educ") %>%
exp()
(ci_educ - 1)*100
# Type your code for Question 12 here.
BPM_pred_lwage <- predict(bma_lwage, estimator = 'BPM', se.fit = TRUE)
# Find the index of observation with the largest fitted value
opt1 <- which.max(BPM_pred_lwage$fit)
# Extract the row with this observation and glimpse at the row
wage_no_na %>%
slice(opt1) %>%
glimpse()
# Type your code for Question 12 here.
BPM_pred_lwage <- predict(bma_lwage, estimator = 'BPM', se.fit = TRUE)
# Find the index of observation with the largest fitted value
opt1 <- which.max(BPM_pred_lwage$fit)
# Extract the row with this observation and glimpse at the row
wage_no_na %>%
slice(opt1) %>%
glimpse()
# A 95% credible interval for predicting log wages can be obtained by
ci_lwage1 <- confint(BPM_pred_lwage, parm = "pred")
ci_lwage1[opt1,]
exp(ci_lwage1[opt1,])
