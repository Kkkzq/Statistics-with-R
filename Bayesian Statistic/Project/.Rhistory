scale_fill_brewer(name = "feature film")
p2 <- ggplot(data_movies, aes(x = summer_season, y = audience_score, fill = summer_season)) +
geom_boxplot() +
ggtitle('Audience score vs summer season') +
xlab('summer season') +
ylab('Audience Score') + scale_fill_brewer(name = "summer season")
p3 <- ggplot(data_movies, aes(x = oscar_season, y = audience_score, fill = oscar_season)) +
geom_boxplot() +
ggtitle('Audience score vs oscar_season') +
xlab('oscar_season') +
ylab('Audience Score') +
scale_fill_brewer(name = "oscar_season")
p4 <- ggplot(data_movies, aes(x = drama, y = audience_score, fill = drama)) +
geom_boxplot() +
ggtitle('Audience score vs drama') +
xlab('drama') +
ylab('Audience Score') +
scale_fill_brewer(name = "drama")
p5 <- ggplot(data_movies, aes(x = mpaa_rating_R, y = audience_score, fill = mpaa_rating_R)) +
geom_boxplot() +
ggtitle('Audience score vs mpaa_rating_R') +
xlab('mpaa_rating_R') +
ylab('Audience Score') +
scale_fill_brewer(name = "mpaa_rating_R")
# arrange the previously created plots
grid.arrange(p1, p2, p3, p4, p5, ncol = 2)
p1 <- ggplot(data_movies, aes(audience_score, fill = top200_box))+
geom_density () +
labs(title = "Audience score vs. top200_box") +
labs(x = "top200 box", y = "Density")
p2 <- ggplot(data_movies, aes(audience_score, fill = best_pic_nom))+
geom_density () +
labs(title = "Audience score vs. best_pic_nom") +
labs(x = "best pic nom", y = "Density")
p3 <- ggplot(data_movies, aes(audience_score, fill = best_pic_win)) +
geom_density() +
labs(title = "Audience score vs. best pic win") +
labs(x = "best pic win", y = "Density")
p4 <- ggplot(data_movies, aes(audience_score, fill = best_actor_win))+
geom_density () +
labs(title = "Audience score vs. best_actor_win") +
labs(x = "best actor win", y = "Density")
p5 <- ggplot(data_movies, aes(audience_score, fill = best_dir_win))+
geom_density () +
labs(title = "Audience score vs. best_dir_win") +
labs(x = "best dir win", y = "Density")
p6 <- ggplot(data_movies, aes(audience_score, fill = best_actress_win))+
geom_density () +
labs(title = "Audience score vs. best_actress_win") +
labs(x = "best actress win", y = "Density")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
p1 <- ggplot(data_movies, aes(audience_score, fill = top200_box))+
geom_density () +
labs(title = "Audience score vs. top200_box") +
labs(x = "top200 box", y = "Density") +
scale_fill_brewer(palette = "Set1")
p2 <- ggplot(data_movies, aes(audience_score, fill = best_pic_nom))+
geom_density () +
labs(title = "Audience score vs. best_pic_nom") +
labs(x = "best pic nom", y = "Density")
p3 <- ggplot(data_movies, aes(audience_score, fill = best_pic_win)) +
geom_density() +
labs(title = "Audience score vs. best pic win") +
labs(x = "best pic win", y = "Density")
p4 <- ggplot(data_movies, aes(audience_score, fill = best_actor_win))+
geom_density () +
labs(title = "Audience score vs. best_actor_win") +
labs(x = "best actor win", y = "Density")
p5 <- ggplot(data_movies, aes(audience_score, fill = best_dir_win))+
geom_density () +
labs(title = "Audience score vs. best_dir_win") +
labs(x = "best dir win", y = "Density")
p6 <- ggplot(data_movies, aes(audience_score, fill = best_actress_win))+
geom_density () +
labs(title = "Audience score vs. best_actress_win") +
labs(x = "best actress win", y = "Density")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
p1 <- ggplot(data_movies, aes(audience_score, fill = top200_box))+
geom_density () +
labs(title = "Audience score vs. top200_box") +
labs(x = "top200 box", y = "Density") +
scale_fill_brewer(palette = "Set1")
p2 <- ggplot(data_movies, aes(audience_score, fill = best_pic_nom))+
geom_density () +
labs(title = "Audience score vs. best_pic_nom") +
labs(x = "best pic nom", y = "Density") +
scale_fill_brewer(palette = "Set1")
p3 <- ggplot(data_movies, aes(audience_score, fill = best_pic_win)) +
geom_density() +
labs(title = "Audience score vs. best pic win") +
labs(x = "best pic win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p4 <- ggplot(data_movies, aes(audience_score, fill = best_actor_win))+
geom_density () +
labs(title = "Audience score vs. best_actor_win") +
labs(x = "best actor win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p5 <- ggplot(data_movies, aes(audience_score, fill = best_dir_win))+
geom_density () +
labs(title = "Audience score vs. best_dir_win") +
labs(x = "best dir win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p6 <- ggplot(data_movies, aes(audience_score, fill = best_actress_win))+
geom_density () +
labs(title = "Audience score vs. best_actress_win") +
labs(x = "best actress win", y = "Density") +
scale_fill_brewer(palette = "Set1")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
p1 <- ggplot(data_movies, aes(audience_score, fill = top200_box))+
geom_density () +
labs(title = "Audience score vs. top200_box") +
labs(x = "top200 box", y = "Density") +
scale_fill_brewer(palette = "Set1")
p2 <- ggplot(data_movies, aes(audience_score, fill = best_pic_nom))+
geom_density () +
labs(title = "Audience score vs. best_pic_nom") +
labs(x = "best pic nom", y = "Density") +
scale_fill_brewer(palette = "Set1")
p3 <- ggplot(data_movies, aes(audience_score, fill = best_pic_win)) +
geom_density() +
labs(title = "Audience score vs. best pic win") +
labs(x = "best pic win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p4 <- ggplot(data_movies, aes(audience_score, fill = best_actor_win))+
geom_density () +
labs(title = "Audience score vs. best_actor_win") +
labs(x = "best actor win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p5 <- ggplot(data_movies, aes(audience_score, fill = best_dir_win))+
geom_density () +
labs(title = "Audience score vs. best_dir_win") +
labs(x = "best dir win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p6 <- ggplot(data_movies, aes(audience_score, fill = best_actress_win))+
geom_density () +
labs(title = "Audience score vs. best_actress_win") +
labs(x = "best actress win", y = "Density") +
scale_fill_brewer(palette = "Set1")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
p1 <- ggplot(data_movies, aes(audience_score, fill = top200_box))+
geom_density () +
labs(title = "Audience score vs. top200_box") +
labs(x = "top200 box", y = "Density") +
scale_fill_brewer(palette = "Set1")
p2 <- ggplot(data_movies, aes(audience_score, fill = best_pic_nom))+
geom_density () +
labs(title = "Audience score vs. best_pic_nom") +
labs(x = "best pic nom", y = "Density") +
scale_fill_brewer(palette = "Set2")
p3 <- ggplot(data_movies, aes(audience_score, fill = best_pic_win)) +
geom_density() +
labs(title = "Audience score vs. best pic win") +
labs(x = "best pic win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p4 <- ggplot(data_movies, aes(audience_score, fill = best_actor_win))+
geom_density () +
labs(title = "Audience score vs. best_actor_win") +
labs(x = "best actor win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p5 <- ggplot(data_movies, aes(audience_score, fill = best_dir_win))+
geom_density () +
labs(title = "Audience score vs. best_dir_win") +
labs(x = "best dir win", y = "Density") +
scale_fill_brewer(palette = "Set1")
p6 <- ggplot(data_movies, aes(audience_score, fill = best_actress_win))+
geom_density () +
labs(title = "Audience score vs. best_actress_win") +
labs(x = "best actress win", y = "Density") +
scale_fill_brewer(palette = "Set1")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
p1 <- ggplot(data_movies, aes(audience_score, fill = top200_box))+
geom_density () +
labs(title = "Audience score vs. top200_box") +
labs(x = "top200 box", y = "Density") +
scale_fill_brewer(palette = "Set2")
p2 <- ggplot(data_movies, aes(audience_score, fill = best_pic_nom))+
geom_density () +
labs(title = "Audience score vs. best_pic_nom") +
labs(x = "best pic nom", y = "Density") +
scale_fill_brewer(palette = "Set2")
p3 <- ggplot(data_movies, aes(audience_score, fill = best_pic_win)) +
geom_density() +
labs(title = "Audience score vs. best pic win") +
labs(x = "best pic win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p4 <- ggplot(data_movies, aes(audience_score, fill = best_actor_win))+
geom_density () +
labs(title = "Audience score vs. best_actor_win") +
labs(x = "best actor win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p5 <- ggplot(data_movies, aes(audience_score, fill = best_dir_win))+
geom_density () +
labs(title = "Audience score vs. best_dir_win") +
labs(x = "best dir win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p6 <- ggplot(data_movies, aes(audience_score, fill = best_actress_win))+
geom_density () +
labs(title = "Audience score vs. best_actress_win") +
labs(x = "best actress win", y = "Density") +
scale_fill_brewer(palette = "Set2")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
bayes_inference(y = audience_score, x = feature_film, data = df, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = feature_film, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = feature_film, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = drama, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = feature_film, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = drama, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = oscar_season, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = feature_film, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = drama, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = oscar_season, x = oscar_season, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = feature_film, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = drama, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = oscar_season, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = summer_season, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = mpaa_rating_R, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
movies_model = bas.lm(audience_score ~ feature_film+drama+runtime+mpaa_rating_R+thtr_rel_year+oscar_season+summer_season+imdb_rating+imdb_num_votes+critics_score+best_pic_nom+best_pic_win+best_actor_win+best_actress_win+best_dir_win+top200_box, data = data_movies, n.models=2^16, prior = "BIC", modelprior = uniform(), initprobs="eplogp")
summary(movies_bma)
movies_model = bas.lm(audience_score ~ feature_film+drama+runtime+mpaa_rating_R+thtr_rel_year+oscar_season+summer_season+imdb_rating+imdb_num_votes+critics_score+best_pic_nom+best_pic_win+best_actor_win+best_actress_win+best_dir_win+top200_box, data = data_movies, n.models=2^16, prior = "BIC", modelprior = uniform(), initprobs="eplogp")
summary(movies_model)
movies_mcmc = bas.lm(audience_score ~ feature_film+drama+runtime+mpaa_rating_R+thtr_rel_year+oscar_season+summer_season+imdb_rating+imdb_num_votes+critics_score+best_pic_nom+best_pic_win+best_actor_win+best_actress_win+best_dir_win+top200_box, data = data_movies, method="MCMC",MCMC.iterations=2*10^6, n.models=2^16, prior = "BIC", modelprior = uniform(), initprobs="eplogp")
summary(movies_mcmc)
# plots for model BIC
p1 <- plot(movies_bma,which=1,add.smooth=F)
# plots for model BIC
p1 <- plot(movies_model,which=1,add.smooth=F)
p2 <- plot(movies_model,which=2,add.smooth=F)
p3 <- plot(movies_model,which=3)
p4 <- image(movies_model,subset=-1)
grid.arrange(p1, p2, p3, p4, ncol = 2)
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(tidyr)
library(grid)
library(GGally)
library(gridExtra)
library(MASS)
library(cowplot)
# plots for model BIC
p1 <- plot(movies_model,which=1,add.smooth=F)
p2 <- plot(movies_model,which=2,add.smooth=F)
p3 <- plot(movies_model,which=3)
p4 <- image(movies_model,subset=-1)
plot_grid(p1, p2, p3, p4, ncol = 2)
# plots for MCMC
diagnostics(movies_mcmc)
plot(movies_mcmc,which=2,add.smooth=F)
# plots for model BIC
p1 <- plot(movies_model,which=1,add.smooth=F)
p2 <- plot(movies_model,which=2,add.smooth=F)
p3 <- plot(movies_model,which=3)
p4 <- image(movies_model,subset=-1)
plot_grid(p1, p2, p3, p4)
# plots for MCMC
mc1 <- diagnostics(movies_mcmc)
mc2 <- plot(movies_mcmc,which=2,add.smooth=F)
plot_grid(mc1, mc2)
# plots for model BIC
p1 = plot(movies_model,which=1,add.smooth=F)
p2 <- plot(movies_model,which=2,add.smooth=F)
p3 <- plot(movies_model,which=3)
p4 <- image(movies_model,subset=-1)
plot_grid(p1, p2, p3, p4)
# plots for MCMC
mc1 <- diagnostics(movies_mcmc)
mc2 <- plot(movies_mcmc,which=2,add.smooth=F)
plot_grid(mc1, mc2)
# plots for model BIC
plot(movies_model,which=1,add.smooth=F)
plot(movies_model,which=2,add.smooth=F)
plot(movies_model,which=3)
image(movies_model,subset=-1)
# plots for MCMC
diagnostics(movies_mcmc)
plot(movies_mcmc,which=2,add.smooth=F)
View(data_movies)
data.model <- data_movies[c("feature_film","drama","runtime","mpaa_rating_R","thtr_rel_year","oscar_season","summer_season","imdb_rating","imdb_num_votes","critics_score","best_pic_nom","best_pic_win","best_actor_win","best_actress_win","best_dir_win","top200_box","audience_score")]
str(data.model)
data.model <- data_movies[c("feature_film","drama","runtime","mpaa_rating_R","thtr_rel_year","oscar_season","summer_season","imdb_rating","imdb_num_votes","critics_score","best_pic_nom","best_pic_win","best_actor_win","best_actress_win","best_dir_win","top200_box","audience_score")]
str(data.model)
lm1 <- lm(audience_score ~ ., data = data.model)
score_step <- stepAIC(lm1, trace = FALSE)
score_step$anova
bma_audience_score <- bas.lm(audience_score ~., data = data.model, prior = "BIC", modelprior = uniform())
bma_audience_score
bma_audience_score <- bas.lm(audience_score ~., data = data.model, prior = "BIC", modelprior = uniform())
summary(bma_audience_score)
bma_audience_score <- bas.lm(audience_score ~., data = data.model, prior = "BIC", modelprior = uniform())
summary(bma_audience_score)
image(bma_audience_score, rotate = FALSE)
bma_audience_score <- bas.lm(audience_score ~., data = data.model, prior = "BIC", modelprior = uniform())
summary(bma_audience_score)
image(bma_audience_score, rotate = FALSE)
coef_bma_audience_score <- coef(bma_audience_score)
plot(coef_bma_audience_score)
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(tidyr)
library(grid)
library(GGally)
library(gridExtra)
library(MASS)
library(cowplot)
load("movies.Rdata")
# Looking at the summary table of the varibales in the dataset
str(movies)
dim(movies)
movies <- na.omit(movies)
dim(movies)
data_movies<-movies %>% mutate(feature_film = factor(ifelse(title_type=="Feature Film",c("yes"), c("no")),levels=c("no","yes"))) %>%
mutate(drama = factor(ifelse(genre=="Drama", c("yes"), c("no")),levels=c("no","yes")))%>%
mutate(mpaa_rating_R =factor(ifelse(mpaa_rating=="R", c("yes"), c("no")),levels=c("no","yes")))%>%
mutate(oscar_season = factor(ifelse(thtr_rel_month%in% 10:12, c("yes"), c("no")),levels=c("no","yes")))%>%
mutate(summer_season = factor(ifelse(thtr_rel_month %in% 5:8, c("yes"), c("no")),levels=c("no","yes")))
ggplot(data_movies, aes(x = audience_score, y = ..density..)) +
geom_histogram(bins = 40, fill = 'darkgrey', colour = 'darkgrey') +
geom_density(size = 1, colour = 'yellow')
summary(data_movies$audience_score)
p1 <- ggplot(data_movies, aes(y=audience_score, x=feature_film, fill = feature_film)) +
geom_boxplot() +
ggtitle("Relationship between Audience Score and Feature Films") +
xlab("Feature Films") +
ylab("Audience Score") +
scale_fill_brewer(name = "feature film")
p2 <- ggplot(data_movies, aes(x = summer_season, y = audience_score, fill = summer_season)) +
geom_boxplot() +
ggtitle('Audience score vs summer season') +
xlab('summer season') +
ylab('Audience Score') + scale_fill_brewer(name = "summer season")
p3 <- ggplot(data_movies, aes(x = oscar_season, y = audience_score, fill = oscar_season)) +
geom_boxplot() +
ggtitle('Audience score vs oscar_season') +
xlab('oscar_season') +
ylab('Audience Score') +
scale_fill_brewer(name = "oscar_season")
p4 <- ggplot(data_movies, aes(x = drama, y = audience_score, fill = drama)) +
geom_boxplot() +
ggtitle('Audience score vs drama') +
xlab('drama') +
ylab('Audience Score') +
scale_fill_brewer(name = "drama")
p5 <- ggplot(data_movies, aes(x = mpaa_rating_R, y = audience_score, fill = mpaa_rating_R)) +
geom_boxplot() +
ggtitle('Audience score vs mpaa_rating_R') +
xlab('mpaa_rating_R') +
ylab('Audience Score') +
scale_fill_brewer(name = "mpaa_rating_R")
# arrange the previously created plots
grid.arrange(p1, p2, p3, p4, p5, ncol = 2)
p1 <- ggplot(data_movies, aes(audience_score, fill = top200_box))+
geom_density () +
labs(title = "Audience score vs. top200_box") +
labs(x = "top200 box", y = "Density") +
scale_fill_brewer(palette = "Set2")
p2 <- ggplot(data_movies, aes(audience_score, fill = best_pic_nom))+
geom_density () +
labs(title = "Audience score vs. best_pic_nom") +
labs(x = "best pic nom", y = "Density") +
scale_fill_brewer(palette = "Set2")
p3 <- ggplot(data_movies, aes(audience_score, fill = best_pic_win)) +
geom_density() +
labs(title = "Audience score vs. best pic win") +
labs(x = "best pic win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p4 <- ggplot(data_movies, aes(audience_score, fill = best_actor_win))+
geom_density () +
labs(title = "Audience score vs. best_actor_win") +
labs(x = "best actor win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p5 <- ggplot(data_movies, aes(audience_score, fill = best_dir_win))+
geom_density () +
labs(title = "Audience score vs. best_dir_win") +
labs(x = "best dir win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p6 <- ggplot(data_movies, aes(audience_score, fill = best_actress_win))+
geom_density () +
labs(title = "Audience score vs. best_actress_win") +
labs(x = "best actress win", y = "Density") +
scale_fill_brewer(palette = "Set2")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)
bayes_inference(y = audience_score, x = feature_film, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = drama, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = oscar_season, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = summer_season, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = mpaa_rating_R, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
data.model <- data_movies[c("feature_film","drama","runtime","mpaa_rating_R","thtr_rel_year","oscar_season","summer_season","imdb_rating","imdb_num_votes","critics_score","best_pic_nom","best_pic_win","best_actor_win","best_actress_win","best_dir_win","top200_box","audience_score")]
str(data.model)
lm1 <- lm(audience_score ~ ., data = data.model)
score_step <- stepAIC(lm1, trace = FALSE)
score_step$anova
bma_audience_score <- bas.lm(audience_score ~., data = data.model, prior = "BIC", modelprior = uniform())
summary(bma_audience_score)
image(bma_audience_score, rotate = FALSE)
finalmodel <- data.model[c("runtime","imdb_rating","critics_score","audience_score")]
bma_finalmodel <- bas.lm(audience_score ~., data = finalmodel, prior = "ZS-null", method = "MCMC", modelprior = uniform())
summary(bma_finalmodel)
lalaland <- data.frame(ftitle="La La Land",title_type="Feature Film", genre="Drama",runtime=128, mpaa_rating="PG-13",studio="Lionsgate Films",thtr_rel_year=2016,thtr_rel_month=12, thtr_rel_day=9,dvd_rel_year=2017, dvd_rel_month=4,dvd_rel_day=25,imdb_rating=8.1, imdb_num_votes=310814, critics_rating="Certified Fresh",critics_score=93, audience_rating="Spilled",audience_score=81,best_pic_nom="yes", best_pic_win="yes", best_actor_win="yes",best_actress_win="yes", best_dir_win="yes", top200_box="yes", director="Damien Chazelle", actor1="Ryan Gosling", actor2="Emma Stone", actor3="Amiee Conn",actor4="Terry Walters",actor5="Thom Shelton",imdb_url="http://www.imdb.com/title/tt3783958", rt_url="https://www.rottentomatoes.com/m/la_la_land", feature_film="yes", drama="yes", mpaa_rating_R="no", oscar_season="yes",summer_season="no")
lalaland <- data.frame(ftitle="La La Land",title_type="Feature Film", genre="Drama",runtime=128, mpaa_rating="PG-13",studio="Lionsgate Films",thtr_rel_year=2016,thtr_rel_month=12, thtr_rel_day=9,dvd_rel_year=2017, dvd_rel_month=4,dvd_rel_day=25,imdb_rating=8.1, imdb_num_votes=310814, critics_rating="Certified Fresh",critics_score=93, audience_rating="Spilled",audience_score=81,best_pic_nom="yes", best_pic_win="yes", best_actor_win="yes",best_actress_win="yes", best_dir_win="yes", top200_box="yes", director="Damien Chazelle", actor1="Ryan Gosling", actor2="Emma Stone", actor3="Amiee Conn",actor4="Terry Walters",actor5="Thom Shelton",imdb_url="http://www.imdb.com/title/tt3783958", rt_url="https://www.rottentomatoes.com/m/la_la_land", feature_film="yes", drama="yes", mpaa_rating_R="no", oscar_season="yes",summer_season="no")
data.predict <- rbind(data.model, lalaland)
lalaland <- data.frame(feature_film="yes",drama="yes",runtime=128,mpaa_rating_R="no",thtr_rel_year=2016,oscar_season="yes",summer_season="no",imdb_rating=8.1,imdb_num_votes=310814,critics_score=93,best_pic_nom="yes",best_pic_win="yes",best_actor_win="yes",best_actress_win="yes",best_dir_win="yes",top200_box="yes",audience_score=81)
data.predict <- rbind(data.model, lalaland)
lalaland <- data.frame(feature_film="yes",drama="yes",runtime=128,mpaa_rating_R="no",thtr_rel_year=2016,oscar_season="yes",summer_season="no",imdb_rating=8.1,imdb_num_votes=310814,critics_score=93,best_pic_nom="yes",best_pic_win="yes",best_actor_win="yes",best_actress_win="yes",best_dir_win="yes",top200_box="yes",audience_score=81)
data.predict <- rbind(data.model, lalaland)
lalaland <- tail(lalaland, 1)
str(lalaland)
audience_score_prediction <-predict(bma_finalmodel, newdata=lalaland, estimator="BMA", se.fit=TRUE, interval="predict", level = 0.95)
audience_score_prediction$Ybma
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(tidyr)
library(grid)
library(GGally)
library(gridExtra)
library(MASS)
library(cowplot)
load("movies.Rdata")
# Looking at the summary table of the varibales in the dataset
str(movies)
dim(movies)
movies <- na.omit(movies)
dim(movies)
data_movies<-movies %>% mutate(feature_film = factor(ifelse(title_type=="Feature Film",c("yes"), c("no")),levels=c("no","yes"))) %>%
mutate(drama = factor(ifelse(genre=="Drama", c("yes"), c("no")),levels=c("no","yes")))%>%
mutate(mpaa_rating_R =factor(ifelse(mpaa_rating=="R", c("yes"), c("no")),levels=c("no","yes")))%>%
mutate(oscar_season = factor(ifelse(thtr_rel_month%in% 10:12, c("yes"), c("no")),levels=c("no","yes")))%>%
mutate(summer_season = factor(ifelse(thtr_rel_month %in% 5:8, c("yes"), c("no")),levels=c("no","yes")))
ggplot(data_movies, aes(x = audience_score, y = ..density..)) +
geom_histogram(bins = 40, fill = 'darkgrey', colour = 'darkgrey') +
geom_density(size = 1, colour = 'yellow')
summary(data_movies$audience_score)
p1 <- ggplot(data_movies, aes(y=audience_score, x=feature_film, fill = feature_film)) +
geom_boxplot() +
ggtitle("Audience Score & Feature Films") +
xlab("Feature Films") +
ylab("Audience Score") +
scale_fill_brewer(name = "feature film")
p2 <- ggplot(data_movies, aes(x = summer_season, y = audience_score, fill = summer_season)) +
geom_boxplot() +
ggtitle('Audience score & summer season') +
xlab('summer season') +
ylab('Audience Score') + scale_fill_brewer(name = "summer season")
p3 <- ggplot(data_movies, aes(x = oscar_season, y = audience_score, fill = oscar_season)) +
geom_boxplot() +
ggtitle('Audience score & oscar_season') +
xlab('oscar_season') +
ylab('Audience Score') +
scale_fill_brewer(name = "oscar_season")
p4 <- ggplot(data_movies, aes(x = drama, y = audience_score, fill = drama)) +
geom_boxplot() +
ggtitle('Audience score & drama') +
xlab('drama') +
ylab('Audience Score') +
scale_fill_brewer(name = "drama")
p5 <- ggplot(data_movies, aes(x = mpaa_rating_R, y = audience_score, fill = mpaa_rating_R)) +
geom_boxplot() +
ggtitle('Audience score & mpaa_rating_R') +
xlab('mpaa_rating_R') +
ylab('Audience Score') +
scale_fill_brewer(name = "mpaa_rating_R")
grid.arrange(p1, p2, p3, p4, p5, ncol = 2)
p1 <- ggplot(data_movies, aes(audience_score, fill = top200_box))+
geom_density () +
labs(title = "Audience score & top200_box") +
labs(x = "top200 box", y = "Density") +
scale_fill_brewer(palette = "Set2")
p2 <- ggplot(data_movies, aes(audience_score, fill = best_pic_nom))+
geom_density () +
labs(title = "Audience score & best_pic_nom") +
labs(x = "best pic nom", y = "Density") +
scale_fill_brewer(palette = "Set2")
p3 <- ggplot(data_movies, aes(audience_score, fill = best_pic_win)) +
geom_density() +
labs(title = "Audience score & best pic win") +
labs(x = "best pic win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p4 <- ggplot(data_movies, aes(audience_score, fill = best_actor_win))+
geom_density () +
labs(title = "Audience score & best_actor_win") +
labs(x = "best actor win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p5 <- ggplot(data_movies, aes(audience_score, fill = best_dir_win))+
geom_density () +
labs(title = "Audience score & best_dir_win") +
labs(x = "best dir win", y = "Density") +
scale_fill_brewer(palette = "Set2")
p6 <- ggplot(data_movies, aes(audience_score, fill = best_actress_win))+
geom_density () +
labs(title = "Audience score & best_actress_win") +
labs(x = "best actress win", y = "Density") +
scale_fill_brewer(palette = "Set2")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2)
bayes_inference(y = audience_score, x = feature_film, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = drama, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = oscar_season, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = summer_season, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
bayes_inference(y = audience_score, x = mpaa_rating_R, data = data_movies, statistic = 'mean', type = 'ht', null = 0, alternative = 'twosided', prior = "JZS", rscale = 1, method = "theoretical")
data.model <- data_movies[c("feature_film","drama","runtime","mpaa_rating_R","thtr_rel_year","oscar_season","summer_season","imdb_rating","imdb_num_votes","critics_score","best_pic_nom","best_pic_win","best_actor_win","best_actress_win","best_dir_win","top200_box","audience_score")]
str(data.model)
lm_model <- lm(audience_score ~ ., data = data.model)
score_step <- stepAIC(lm_model, trace = FALSE)
score_step$anova
BMA_audience_score <- bas.lm(audience_score ~., data = data.model, prior = "BIC", modelprior = uniform())
summary(BMA_audience_score)
image(BMA_audience_score, rotate = FALSE)
coef_BMA_audience_score <- coef(BMA_audience_score)
plot(coef_BMA_audience_score)
